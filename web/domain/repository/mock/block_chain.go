// Code generated by MockGen. DO NOT EDIT.
// Source: ./web/domain/repository/block_chain.go
//
// Generated by this command:
//
//	mockgen -source ./web/domain/repository/block_chain.go -destination ./web/domain/repository/mock/block_chain.go -package repository
//

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	time "github.com/watariRyo/cryptochain-go/internal/time"
	model "github.com/watariRyo/cryptochain-go/web/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockBlockChainInterface is a mock of BlockChainInterface interface.
type MockBlockChainInterface struct {
	ctrl     *gomock.Controller
	recorder *MockBlockChainInterfaceMockRecorder
	isgomock struct{}
}

// MockBlockChainInterfaceMockRecorder is the mock recorder for MockBlockChainInterface.
type MockBlockChainInterfaceMockRecorder struct {
	mock *MockBlockChainInterface
}

// NewMockBlockChainInterface creates a new mock instance.
func NewMockBlockChainInterface(ctrl *gomock.Controller) *MockBlockChainInterface {
	mock := &MockBlockChainInterface{ctrl: ctrl}
	mock.recorder = &MockBlockChainInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockChainInterface) EXPECT() *MockBlockChainInterfaceMockRecorder {
	return m.recorder
}

// AddBlock mocks base method.
func (m *MockBlockChainInterface) AddBlock(data string, tm time.TimeProvider) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddBlock", data, tm)
}

// AddBlock indicates an expected call of AddBlock.
func (mr *MockBlockChainInterfaceMockRecorder) AddBlock(data, tm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBlock", reflect.TypeOf((*MockBlockChainInterface)(nil).AddBlock), data, tm)
}

// GetBlock mocks base method.
func (m *MockBlockChainInterface) GetBlock() []*model.Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlock")
	ret0, _ := ret[0].([]*model.Block)
	return ret0
}

// GetBlock indicates an expected call of GetBlock.
func (mr *MockBlockChainInterfaceMockRecorder) GetBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockBlockChainInterface)(nil).GetBlock))
}

// IsValidChain mocks base method.
func (m *MockBlockChainInterface) IsValidChain() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidChain")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsValidChain indicates an expected call of IsValidChain.
func (mr *MockBlockChainInterfaceMockRecorder) IsValidChain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidChain", reflect.TypeOf((*MockBlockChainInterface)(nil).IsValidChain))
}

// ReplaceChain mocks base method.
func (m *MockBlockChainInterface) ReplaceChain(chain []*model.Block, tm time.TimeProvider) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReplaceChain", chain, tm)
}

// ReplaceChain indicates an expected call of ReplaceChain.
func (mr *MockBlockChainInterfaceMockRecorder) ReplaceChain(chain, tm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceChain", reflect.TypeOf((*MockBlockChainInterface)(nil).ReplaceChain), chain, tm)
}

// UnmarshalAndReplaceBlock mocks base method.
func (m *MockBlockChainInterface) UnmarshalAndReplaceBlock(payload []byte, tm time.TimeProvider) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnmarshalAndReplaceBlock", payload, tm)
}

// UnmarshalAndReplaceBlock indicates an expected call of UnmarshalAndReplaceBlock.
func (mr *MockBlockChainInterfaceMockRecorder) UnmarshalAndReplaceBlock(payload, tm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarshalAndReplaceBlock", reflect.TypeOf((*MockBlockChainInterface)(nil).UnmarshalAndReplaceBlock), payload, tm)
}
