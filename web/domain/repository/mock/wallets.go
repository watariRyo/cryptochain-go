// Code generated by MockGen. DO NOT EDIT.
// Source: ./web/domain/repository/wallets.go
//
// Generated by this command:
//
//	mockgen -source ./web/domain/repository/wallets.go -destination ./web/domain/repository/mock/wallets.go -package repository
//

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	time "github.com/watariRyo/cryptochain-go/internal/time"
	model "github.com/watariRyo/cryptochain-go/web/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockWalletsInterface is a mock of WalletsInterface interface.
type MockWalletsInterface struct {
	ctrl     *gomock.Controller
	recorder *MockWalletsInterfaceMockRecorder
	isgomock struct{}
}

// MockWalletsInterfaceMockRecorder is the mock recorder for MockWalletsInterface.
type MockWalletsInterfaceMockRecorder struct {
	mock *MockWalletsInterface
}

// NewMockWalletsInterface creates a new mock instance.
func NewMockWalletsInterface(ctrl *gomock.Controller) *MockWalletsInterface {
	mock := &MockWalletsInterface{ctrl: ctrl}
	mock.recorder = &MockWalletsInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletsInterface) EXPECT() *MockWalletsInterfaceMockRecorder {
	return m.recorder
}

// CreateTransaction mocks base method.
func (m *MockWalletsInterface) CreateTransaction(recipient string, amount int, tm time.TimeProvider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", recipient, amount, tm)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockWalletsInterfaceMockRecorder) CreateTransaction(recipient, amount, tm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockWalletsInterface)(nil).CreateTransaction), recipient, amount, tm)
}

// GetTransactionPool mocks base method.
func (m *MockWalletsInterface) GetTransactionPool() map[uuid.UUID]*model.Transaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionPool")
	ret0, _ := ret[0].(map[uuid.UUID]*model.Transaction)
	return ret0
}

// GetTransactionPool indicates an expected call of GetTransactionPool.
func (mr *MockWalletsInterfaceMockRecorder) GetTransactionPool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionPool", reflect.TypeOf((*MockWalletsInterface)(nil).GetTransactionPool))
}

// TransactionUpdate mocks base method.
func (m *MockWalletsInterface) TransactionUpdate(senderWallet *model.Wallet, recpient string, amount int, tm time.TimeProvider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionUpdate", senderWallet, recpient, amount, tm)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransactionUpdate indicates an expected call of TransactionUpdate.
func (mr *MockWalletsInterfaceMockRecorder) TransactionUpdate(senderWallet, recpient, amount, tm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionUpdate", reflect.TypeOf((*MockWalletsInterface)(nil).TransactionUpdate), senderWallet, recpient, amount, tm)
}

// ValidTransaction mocks base method.
func (m *MockWalletsInterface) ValidTransaction(ctx context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidTransaction", ctx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ValidTransaction indicates an expected call of ValidTransaction.
func (mr *MockWalletsInterfaceMockRecorder) ValidTransaction(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidTransaction", reflect.TypeOf((*MockWalletsInterface)(nil).ValidTransaction), ctx)
}
