// Code generated by MockGen. DO NOT EDIT.
// Source: ./web/domain/repository/wallets.go
//
// Generated by this command:
//
//	mockgen -source ./web/domain/repository/wallets.go -destination ./web/domain/repository/mock/wallets.go -package repository
//

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	time "github.com/watariRyo/cryptochain-go/internal/time"
	model "github.com/watariRyo/cryptochain-go/web/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockWalletsInterface is a mock of WalletsInterface interface.
type MockWalletsInterface struct {
	ctrl     *gomock.Controller
	recorder *MockWalletsInterfaceMockRecorder
	isgomock struct{}
}

// MockWalletsInterfaceMockRecorder is the mock recorder for MockWalletsInterface.
type MockWalletsInterfaceMockRecorder struct {
	mock *MockWalletsInterface
}

// NewMockWalletsInterface creates a new mock instance.
func NewMockWalletsInterface(ctrl *gomock.Controller) *MockWalletsInterface {
	mock := &MockWalletsInterface{ctrl: ctrl}
	mock.recorder = &MockWalletsInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletsInterface) EXPECT() *MockWalletsInterfaceMockRecorder {
	return m.recorder
}

// CaluculateBalance mocks base method.
func (m *MockWalletsInterface) CaluculateBalance(chain []*model.Block, address string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CaluculateBalance", chain, address)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CaluculateBalance indicates an expected call of CaluculateBalance.
func (mr *MockWalletsInterfaceMockRecorder) CaluculateBalance(chain, address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CaluculateBalance", reflect.TypeOf((*MockWalletsInterface)(nil).CaluculateBalance), chain, address)
}

// ClearBlockChainTransactions mocks base method.
func (m *MockWalletsInterface) ClearBlockChainTransactions(chain []*model.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearBlockChainTransactions", chain)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearBlockChainTransactions indicates an expected call of ClearBlockChainTransactions.
func (mr *MockWalletsInterfaceMockRecorder) ClearBlockChainTransactions(chain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearBlockChainTransactions", reflect.TypeOf((*MockWalletsInterface)(nil).ClearBlockChainTransactions), chain)
}

// ClearTransactionPool mocks base method.
func (m *MockWalletsInterface) ClearTransactionPool() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearTransactionPool")
}

// ClearTransactionPool indicates an expected call of ClearTransactionPool.
func (mr *MockWalletsInterfaceMockRecorder) ClearTransactionPool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearTransactionPool", reflect.TypeOf((*MockWalletsInterface)(nil).ClearTransactionPool))
}

// CreateTransaction mocks base method.
func (m *MockWalletsInterface) CreateTransaction(recipient string, amount int, tm time.TimeProvider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", recipient, amount, tm)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockWalletsInterfaceMockRecorder) CreateTransaction(recipient, amount, tm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockWalletsInterface)(nil).CreateTransaction), recipient, amount, tm)
}

// ExistingTransaction mocks base method.
func (m *MockWalletsInterface) ExistingTransaction() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistingTransaction")
	ret0, _ := ret[0].(bool)
	return ret0
}

// ExistingTransaction indicates an expected call of ExistingTransaction.
func (mr *MockWalletsInterfaceMockRecorder) ExistingTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistingTransaction", reflect.TypeOf((*MockWalletsInterface)(nil).ExistingTransaction))
}

// GetTransaction mocks base method.
func (m *MockWalletsInterface) GetTransaction() *model.Transaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction")
	ret0, _ := ret[0].(*model.Transaction)
	return ret0
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockWalletsInterfaceMockRecorder) GetTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockWalletsInterface)(nil).GetTransaction))
}

// GetTransactionPool mocks base method.
func (m *MockWalletsInterface) GetTransactionPool() map[uuid.UUID]*model.Transaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionPool")
	ret0, _ := ret[0].(map[uuid.UUID]*model.Transaction)
	return ret0
}

// GetTransactionPool indicates an expected call of GetTransactionPool.
func (mr *MockWalletsInterfaceMockRecorder) GetTransactionPool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionPool", reflect.TypeOf((*MockWalletsInterface)(nil).GetTransactionPool))
}

// GetWallet mocks base method.
func (m *MockWalletsInterface) GetWallet() *model.Wallet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWallet")
	ret0, _ := ret[0].(*model.Wallet)
	return ret0
}

// GetWallet indicates an expected call of GetWallet.
func (mr *MockWalletsInterfaceMockRecorder) GetWallet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWallet", reflect.TypeOf((*MockWalletsInterface)(nil).GetWallet))
}

// NewRewardTransaction mocks base method.
func (m *MockWalletsInterface) NewRewardTransaction(tm time.TimeProvider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRewardTransaction", tm)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewRewardTransaction indicates an expected call of NewRewardTransaction.
func (mr *MockWalletsInterfaceMockRecorder) NewRewardTransaction(tm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRewardTransaction", reflect.TypeOf((*MockWalletsInterface)(nil).NewRewardTransaction), tm)
}

// SetMap mocks base method.
func (m *MockWalletsInterface) SetMap(transactoinPool map[uuid.UUID]*model.Transaction) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMap", transactoinPool)
}

// SetMap indicates an expected call of SetMap.
func (mr *MockWalletsInterfaceMockRecorder) SetMap(transactoinPool any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMap", reflect.TypeOf((*MockWalletsInterface)(nil).SetMap), transactoinPool)
}

// SetTransaction mocks base method.
func (m *MockWalletsInterface) SetTransaction(transaction *model.Transaction) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTransaction", transaction)
}

// SetTransaction indicates an expected call of SetTransaction.
func (mr *MockWalletsInterfaceMockRecorder) SetTransaction(transaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTransaction", reflect.TypeOf((*MockWalletsInterface)(nil).SetTransaction), transaction)
}

// TransactionUpdate mocks base method.
func (m *MockWalletsInterface) TransactionUpdate(senderWallet *model.Wallet, recpient string, amount int, tm time.TimeProvider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionUpdate", senderWallet, recpient, amount, tm)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransactionUpdate indicates an expected call of TransactionUpdate.
func (mr *MockWalletsInterfaceMockRecorder) TransactionUpdate(senderWallet, recpient, amount, tm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionUpdate", reflect.TypeOf((*MockWalletsInterface)(nil).TransactionUpdate), senderWallet, recpient, amount, tm)
}

// ValidTransaction mocks base method.
func (m *MockWalletsInterface) ValidTransaction(ctx context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidTransaction", ctx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ValidTransaction indicates an expected call of ValidTransaction.
func (mr *MockWalletsInterfaceMockRecorder) ValidTransaction(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidTransaction", reflect.TypeOf((*MockWalletsInterface)(nil).ValidTransaction), ctx)
}

// ValidTransactoins mocks base method.
func (m *MockWalletsInterface) ValidTransactoins(ctx context.Context) []*model.Transaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidTransactoins", ctx)
	ret0, _ := ret[0].([]*model.Transaction)
	return ret0
}

// ValidTransactoins indicates an expected call of ValidTransactoins.
func (mr *MockWalletsInterfaceMockRecorder) ValidTransactoins(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidTransactoins", reflect.TypeOf((*MockWalletsInterface)(nil).ValidTransactoins), ctx)
}
