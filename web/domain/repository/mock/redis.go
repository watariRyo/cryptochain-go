// Code generated by MockGen. DO NOT EDIT.
// Source: ./web/domain/repository/redis.go
//
// Generated by this command:
//
//	mockgen -source ./web/domain/repository/redis.go -destination ./web/domain/repository/mock/redis.go -package repository
//

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	time "github.com/watariRyo/cryptochain-go/internal/time"
	gomock "go.uber.org/mock/gomock"
)

// MockRedisClientInterface is a mock of RedisClientInterface interface.
type MockRedisClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRedisClientInterfaceMockRecorder
	isgomock struct{}
}

// MockRedisClientInterfaceMockRecorder is the mock recorder for MockRedisClientInterface.
type MockRedisClientInterfaceMockRecorder struct {
	mock *MockRedisClientInterface
}

// NewMockRedisClientInterface creates a new mock instance.
func NewMockRedisClientInterface(ctrl *gomock.Controller) *MockRedisClientInterface {
	mock := &MockRedisClientInterface{ctrl: ctrl}
	mock.recorder = &MockRedisClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisClientInterface) EXPECT() *MockRedisClientInterfaceMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockRedisClientInterface) Publish(ctx context.Context, channel, messages string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Publish", ctx, channel, messages)
}

// Publish indicates an expected call of Publish.
func (mr *MockRedisClientInterfaceMockRecorder) Publish(ctx, channel, messages any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockRedisClientInterface)(nil).Publish), ctx, channel, messages)
}

// Subscribe mocks base method.
func (m *MockRedisClientInterface) Subscribe(ctx context.Context, tm time.TimeProvider) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Subscribe", ctx, tm)
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockRedisClientInterfaceMockRecorder) Subscribe(ctx, tm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockRedisClientInterface)(nil).Subscribe), ctx, tm)
}
