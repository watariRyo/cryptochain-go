// Code generated by MockGen. DO NOT EDIT.
// Source: ./web/usecase/usecase.go

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	model "github.com/watariRyo/cryptochain-go/web/domain/model"
)

// MockUseCaseInterface is a mock of UseCaseInterface interface.
type MockUseCaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseInterfaceMockRecorder
}

// MockUseCaseInterfaceMockRecorder is the mock recorder for MockUseCaseInterface.
type MockUseCaseInterfaceMockRecorder struct {
	mock *MockUseCaseInterface
}

// NewMockUseCaseInterface creates a new mock instance.
func NewMockUseCaseInterface(ctrl *gomock.Controller) *MockUseCaseInterface {
	mock := &MockUseCaseInterface{ctrl: ctrl}
	mock.recorder = &MockUseCaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCaseInterface) EXPECT() *MockUseCaseInterfaceMockRecorder {
	return m.recorder
}

// GetBlock mocks base method.
func (m *MockUseCaseInterface) GetBlock() []*model.Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlock")
	ret0, _ := ret[0].([]*model.Block)
	return ret0
}

// GetBlock indicates an expected call of GetBlock.
func (mr *MockUseCaseInterfaceMockRecorder) GetBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockUseCaseInterface)(nil).GetBlock))
}

// GetTransactionPool mocks base method.
func (m *MockUseCaseInterface) GetTransactionPool() map[uuid.UUID]*model.Transaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionPool")
	ret0, _ := ret[0].(map[uuid.UUID]*model.Transaction)
	return ret0
}

// GetTransactionPool indicates an expected call of GetTransactionPool.
func (mr *MockUseCaseInterfaceMockRecorder) GetTransactionPool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionPool", reflect.TypeOf((*MockUseCaseInterface)(nil).GetTransactionPool))
}

// GetWalletInfo mocks base method.
func (m *MockUseCaseInterface) GetWalletInfo() (*model.WalletInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletInfo")
	ret0, _ := ret[0].(*model.WalletInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletInfo indicates an expected call of GetWalletInfo.
func (mr *MockUseCaseInterfaceMockRecorder) GetWalletInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletInfo", reflect.TypeOf((*MockUseCaseInterface)(nil).GetWalletInfo))
}

// Mine mocks base method.
func (m *MockUseCaseInterface) Mine(ctx context.Context, payload string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mine", ctx, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// Mine indicates an expected call of Mine.
func (mr *MockUseCaseInterfaceMockRecorder) Mine(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mine", reflect.TypeOf((*MockUseCaseInterface)(nil).Mine), ctx, payload)
}

// MineTransactions mocks base method.
func (m *MockUseCaseInterface) MineTransactions(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MineTransactions", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// MineTransactions indicates an expected call of MineTransactions.
func (mr *MockUseCaseInterfaceMockRecorder) MineTransactions(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MineTransactions", reflect.TypeOf((*MockUseCaseInterface)(nil).MineTransactions), ctx)
}

// SyncWithRootState mocks base method.
func (m *MockUseCaseInterface) SyncWithRootState(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncWithRootState", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncWithRootState indicates an expected call of SyncWithRootState.
func (mr *MockUseCaseInterfaceMockRecorder) SyncWithRootState(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncWithRootState", reflect.TypeOf((*MockUseCaseInterface)(nil).SyncWithRootState), ctx)
}

// Transact mocks base method.
func (m *MockUseCaseInterface) Transact(ctx context.Context, req *model.Transact) (map[uuid.UUID]*model.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transact", ctx, req)
	ret0, _ := ret[0].(map[uuid.UUID]*model.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transact indicates an expected call of Transact.
func (mr *MockUseCaseInterfaceMockRecorder) Transact(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transact", reflect.TypeOf((*MockUseCaseInterface)(nil).Transact), ctx, req)
}
