// Code generated by MockGen. DO NOT EDIT.
// Source: ./web/usecase/usecase.go
//
// Generated by this command:
//
//	mockgen -source ./web/usecase/usecase.go -destination ./web/usecase/mock/usecase.go -package usecase
//

// Package usecase is a generated GoMock package.
package usecase

import (
	reflect "reflect"

	model "github.com/watariRyo/cryptochain-go/web/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockUseCaseInterface is a mock of UseCaseInterface interface.
type MockUseCaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseInterfaceMockRecorder
	isgomock struct{}
}

// MockUseCaseInterfaceMockRecorder is the mock recorder for MockUseCaseInterface.
type MockUseCaseInterfaceMockRecorder struct {
	mock *MockUseCaseInterface
}

// NewMockUseCaseInterface creates a new mock instance.
func NewMockUseCaseInterface(ctrl *gomock.Controller) *MockUseCaseInterface {
	mock := &MockUseCaseInterface{ctrl: ctrl}
	mock.recorder = &MockUseCaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCaseInterface) EXPECT() *MockUseCaseInterfaceMockRecorder {
	return m.recorder
}

// GetBlock mocks base method.
func (m *MockUseCaseInterface) GetBlock() []*model.Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlock")
	ret0, _ := ret[0].([]*model.Block)
	return ret0
}

// GetBlock indicates an expected call of GetBlock.
func (mr *MockUseCaseInterfaceMockRecorder) GetBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockUseCaseInterface)(nil).GetBlock))
}

// Mine mocks base method.
func (m *MockUseCaseInterface) Mine(payload string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mine", payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// Mine indicates an expected call of Mine.
func (mr *MockUseCaseInterfaceMockRecorder) Mine(payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mine", reflect.TypeOf((*MockUseCaseInterface)(nil).Mine), payload)
}

// SyncChain mocks base method.
func (m *MockUseCaseInterface) SyncChain() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncChain")
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncChain indicates an expected call of SyncChain.
func (mr *MockUseCaseInterfaceMockRecorder) SyncChain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncChain", reflect.TypeOf((*MockUseCaseInterface)(nil).SyncChain))
}
